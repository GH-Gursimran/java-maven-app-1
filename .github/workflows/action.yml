#### Environment Variables ####
env:
  COVERAGE_THRESHOLD: 20
  CODE_SMELLS_THRESHOLD: 200
  VULNERABILITIES_THRESHOLD: 6
  
name: Github Actions Maven Build
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'maven'
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=GH-Gursimran_java-maven-app-1

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.4
        with :
          name: Artifacts
          path : target/*.jar
       ######## JUnit Test with Maven ########
      - name: Test with Maven
        run: mvn -B test --file pom.xml
        
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco/ 
          
      #######SONAR GATE################
      - name: Sonar Gate
        shell: bash 
        run: |
          curl --location --request GET 'https://sonarcloud.io/api/measures/component?metricKeys=code_smells,coverage,duplicated_lines_density,vulnerabilities,security_hotspots,critical_violations,bugs&component=GH-Gursimran_java-maven-app-1' --header 'Authorization: Bearer a572c409f383e90623d870c204463c2a2a0682fe' > ./Response.json
          while read jsonData ;
          do
            metric=$(jq -r '.metric' <<< $jsonData)
            value=$(jq -r '.value'<<< $jsonData)
            echo "$metric"
            echo "$value"
            #echo "${metric%.*}"

            if [ "$metric" == "coverage" ] ;
              then
                if [ "${value%.*}" -lt ${{env.COVERAGE-THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.COVERAGE_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "code_smells" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CODE_SMELLS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CODE_SMELLS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "vulnerabilities" ] ;
              then
                if [ "${value%.*}" -gt ${{env.VULNERABILITIES_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.VULNERABILITIES_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi

            elif [ "$metric" == "critical_violations" ] ;
              then
                if [ "${value%.*}" -gt ${{env.CRITICAL_VIOLATIONS_THRESHOLD }} ] ;
                  then
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Failed"
                    exit 1
                  else
                    echo "Expected ${metric%.*} - ${{env.CRITICAL_VIOLATIONS_THRESHOLD}}"
                    echo "Actual ${metric%.*} - ${value%.*}"
                    echo "Sonar code coverage Gate: Passed"
                  fi
            fi
          done <<< $(jq -c '.component.measures[]' $PWD/Response.json)
          cat $PWD/Response.json
          
  Docker_Build:
        needs: build
        uses: GH-Gursimran/java-maven-app-1/.github/workflows/docker.yml@main
        with:
          image_name: java-maven-app
        secrets:
          dock_username: ${{secrets.DOCKER_USERNAME}}
          dock_password: ${{secrets.DOCKER_PASSWORD}}
      
  Executing-Separate-Repos-Workflow:
        uses: GH-Gursimran/psychic-enigma/.github/workflows/action.yml@main
